% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/identify_data_relationships.R
\name{get_jkeys}
\alias{get_jkeys}
\title{Find Nested Join Keys Between Two Data Frames}
\usage{
get_jkeys(df1, df2)
}
\arguments{
\item{df1}{A data frame. The first data frame to compare.}

\item{df2}{A data frame. The second data frame to compare.}
}
\value{
A character vector of column names that are suitable as join keys based on both name and nested content.
}
\description{
Identifies columns with the same name in two data frames where the set of unique, non-missing values in one column is a subset of the values in the corresponding column of the other data frame (in either direction).
Such columns are suitable as join keys for merging or joining the data frames, as all values in one data frame are guaranteed to be present in the other.
}
\details{
The function operates as follows:
\itemize{
\item It first identifies all columns with the same name in both data frames.
\item For each such column, it extracts the unique, non-\code{NA} values from both data frames.
\item If all values in one data frame's column are present in the other data frame's column (i.e., the values are nested in either direction), the column name is included in the result.
\item The function does not require the sets of values to be identical, only that one is a subset of the other.
}
}
\examples{
df1 <- data.frame(id = c(1, 2, 3), group = c("A", "B", "C"))
df2 <- data.frame(id = c(1, 2, 3, 4), group = c("A", "B", "C", "D"))
find_nested_join_keys(df1, df2)
# Returns: "id" "group"

df3 <- data.frame(id = c(1, 2), group = c("A", "B"))
find_nested_join_keys(df1, df3)
# Returns: "id" "group"

df4 <- data.frame(id = c(4, 5), group = c("D", "E"))
find_nested_join_keys(df1, df4)
# Returns: character(0)

}
