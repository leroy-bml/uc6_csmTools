% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/map_data2.R
\name{apply_mappings}
\alias{apply_mappings}
\title{Apply a Full Set of Mapping and Formatting Rules to Data}
\usage{
apply_mappings(input_data, map_path, header_dict, header_type = "long")
}
\description{
Orchestrates a multi-phase data transformation process. It reads a set of rules from a YAML file to process, reshape,
and format a list of input data frames into a structured final output.
}
\details{
The function operates in three distinct phases, driven by rules defined in a YAML mapping file (\code{map_path}).
\enumerate{
\item \strong{Phase 1: Data Transformation}
\itemize{
\item Iterates through the mapping rules, skipping any header-specific rules.
\item For each rule, it identifies the source data and key columns.
\item It calls \code{process_actions()} to perform the core data generation and transformation, accumulating results in an intermediate list.
}
\item \strong{Phase 2: Schema Application & Header Mapping}
\itemize{
\item Re-iterates through the rules, this time processing only actions of type \code{map_headers}.
\item Within each targeted data frame, it performs a series of schema clean-up operations:
\itemize{
\item \strong{Renaming}: Renames columns based on a \code{rename_list}.
\item \strong{Merging}: Automatically finds and merges any duplicate columns that may result from renaming, using \code{merge_row_values()}.
\item \strong{Formatting}: Applies \code{sprintf()} or date formatting to specified columns.
}
}
\item \strong{Phase 3: Final Header Swap}
\itemize{
\item If \code{header_type} is set to \code{"short"}, it performs a final pass over all output data frames.
}
}
}
