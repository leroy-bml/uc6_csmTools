% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/etl_utils.R
\name{apply_recursive}
\alias{apply_recursive}
\title{Recursively Apply a Function to Data Frames in a List}
\usage{
apply_recursive(x, f, ...)
}
\arguments{
\item{x}{An object, typically a list, which may contain data frames and other nested lists.}

\item{f}{The function to apply to each data frame found within \code{x}.}

\item{...}{Additional arguments passed on to the function \code{f}.}
}
\value{
A list with the same structure as \code{x}, but where every data frame has been replaced by the result of \code{f(dataframe, ...)}.
Non-data-frame elements are returned unchanged.
}
\description{
Traverses a list structure, including nested lists, and applies a given function \code{f} to every element that is a data frame.
}
\examples{
# Create a nested list containing data frames
nested_list <- list(
  a = data.frame(x = 1:3),
  b = list(
    c = "text",
    d = data.frame(y = 4:5)
  )
)

# Apply the `nrow` function to each data frame in the list
apply_recursive(nested_list, nrow)

# Apply a custom function with an additional argument
add_col <- function(df, new_val) {
  df$new_col <- new_val
  df
}
apply_recursive(nested_list, add_col, new_val = 99)

}
